name: Build package

on:
  push:
    paths-ignore:
      - "**/*.md"
      - '**/*.txt'
  pull_request:
    paths-ignore:
      - "**/*.md"
      - '**/*.txt'
  workflow_dispatch:

jobs:
  build_pkg:
    runs-on: ubuntu-20.04
    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Set env vars
      run: |
        echo "llvm_ver=12.0" >> $GITHUB_ENV
        echo "sha_name=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_ENV
        echo "sdl_path=SDL-PS4" >> $GITHUB_ENV
        echo "curl_path=oosdk_libraries/curl-7.64.1" >> $GITHUB_ENV
        echo "OO_PS4_TOOLCHAIN=$GITHUB_WORKSPACE/OpenOrbis/PS4Toolchain" >> $GITHUB_ENV
        echo "OO_SDK_URL=https://github.com/illusion0001/OpenOrbis-PS4-Toolchain/releases/latest/download/toolchain.tar.gz" >> $GITHUB_ENV

    - name: Checkout oosdk_libraries
      uses: actions/checkout@v3
      with:
        repository: bucanero/oosdk_libraries
        path: oosdk_libraries

    # temporary release until 0.53 is released
    - name: Download OpenOrbis Toolchain
      run: curl -sL ${{ env.OO_SDK_URL }} | tar xz -C ./

    - name: Copy makerules
      run: cp oosdk_libraries/build_rules.mk OpenOrbis/PS4Toolchain/build_rules.mk

    
    - name: Checkout SDL-PS4
      uses: actions/checkout@v3
      with:
        repository: bucanero/SDL-PS4
        path: ${{ env.sdl_path }}
        ref: ps4

    - name: Checkout mxml
      uses: actions/checkout@v3
      with:
        repository: bucanero/mxml
        path: mxml

    - name: Cache LLVM and Clang
      id: cache-llvm
      uses: actions/cache@v3
      with:
        path: ./llvm
        key: llvm-${{ env.llvm_ver }}

    - name: Install LLVM and Clang
      uses: KyleMayes/install-llvm-action@v1
      with:
        version: ${{ env.llvm_ver }}
        cached: ${{ steps.cache-llvm.outputs.cache-hit }}

    - name: Install polarssl
      working-directory: oosdk_libraries/polarssl-1.3.9
      run: make install

    - name: Cache curl
      id: cache-curl
      uses: actions/cache@v3
      with:
        path: ${{ env.curl_path }}/orbis/lib/libcurl.a
        key: ${{ runner.os }}-curl

    - name: Install libcurl library
      if: steps.cache-curl.outputs.cache-hit != 'true'
      working-directory: ${{ env.curl_path }}
      run: |
        mkdir orbis && cd orbis
        cmake --toolchain ../../../SDL-PS4/cmake/openorbis.cmake .. -DCMAKE_USE_POLARSSL=1 -DUSE_UNIX_SOCKETS=0 -DENABLE_THREADED_RESOLVER=0 -DENABLE_IPV6=0
        make libcurl
        cp lib/libcurl.a "${OO_PS4_TOOLCHAIN}/lib"
        ls lib
        
    - name: Compress output
      run: |
        tar -zcvf build.tar.gz ${OO_PS4_TOOLCHAIN}/lib/libcurl.a ${OO_PS4_TOOLCHAIN}/lib/*
    - uses: actions/upload-artifact@v3.1.1
      with:
        name: build-libs
        path: build.tar.gz
        retention-days: 5
